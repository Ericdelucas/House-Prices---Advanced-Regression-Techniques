import pandas as pd  
base = pd.read_csv('train[1].csv')#
base.head(3)


base.info()


eliminar = base.columns[(base.isnull().sum()/base.shape[0]) > 0.1]
eliminar
base = base.drop(eliminar,axis=1)


colunas = base.columns[base.dtypes != 'object']
colunas
base2 = base.loc[:,colunas]
base2.head(3)


base2.isnull().sum().sort_values(ascending=False).head(3)


base2 = base2.fillna(-1)


X = base2.drop('SalePrice',axis=1)
y = base2.SalePrice
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)


from sklearn.linear_model import LinearRegression
reg_rl = LinearRegression().fit(X_train, y_train)
y_rl = reg_rl.predict(X_test)
from sklearn import tree
reg_ar = tree.DecisionTreeRegressor(random_state=42).fit(X_train, y_train)
y_ar = reg_ar.predict(X_test)
from sklearn.neighbors import KNeighborsRegressor
reg_knn = KNeighborsRegressor(n_neighbors=2).fit(X_train, y_train)
y_knn = reg_knn.predict(X_test)


from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error
print(mean_absolute_error(y_test,y_rl))
print(mean_squared_error(y_test,y_rl))


print(mean_absolute_error(y_test,y_ar))
print(mean_squared_error(y_test,y_ar))


print(mean_absolute_error(y_test,y_knn))
print(mean_squared_error(y_test,y_knn))


import matplotlib.pyplot as plt
fig, ax = plt.subplots(ncols=3,figsize=(15,5))
ax[0].scatter(y_test/100000,y_rl/100000)
ax[0].plot([0,700000],[0,700000],'--r')
ax[1].scatter(y_test/100000,y_ar/100000)
ax[1].plot([0,700000],[0,700000],'--r')
ax[2].scatter(y_test/100000,y_knn/100000)
ax[2].plot([0,700000],[0,700000],'--r')
ax[0].set(xlim=(0, 7),ylim=(0, 7))
ax[0].set_xlabel('Real')
ax[0].set_ylabel('Previsão')
ax[1].set(xlim=(0, 7),ylim=(0, 7))
ax[1].set_xlabel('Real')
ax[1].set_ylabel('Previsão')
ax[2].set(xlim=(0, 7),ylim=(0, 7))
ax[2].set_xlabel('Real')
ax[2].set_ylabel('Previsão')
plt.show()


teste = pd.read_csv('test[1].csv')
teste.head(3)


teste = teste.drop(eliminar,axis=1)
colunas2 = teste.columns[teste.dtypes != 'object']
colunas2
teste = teste.loc[:,colunas2]
teste.info()


teste.isnull().sum().sort_values(ascending=False).head(10)


teste = teste.fillna(-1)
y_pred = reg_rl.predict(teste)
teste['SalePrice'] = y_pred
resultado = teste[['Id','SalePrice']]
resultado.head(3)


resultado.to_csv('response.csv',index=False)